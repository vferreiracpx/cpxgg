<!DOCTYPE html>
<html lang="pt-BR">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Formulário de Entrevista - Complexo XP</title>
  <link rel="icon" href="https://i.postimg.cc/MG7qzW4x/emote.png" type="image/x-icon" />
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap" rel="stylesheet">
  <style>
    :root {
      --bg: #11131a;
      --bg-secondary: #181a22;
      --bg-tertiary: #23253a;
      --accent: #4f8cff;
      --accent2: #ffb300;
      --danger: #ff4b4b;
      --success: #4caf50;
      --warning: #ff9800;
      --text: #f4f4f4;
      --muted: #b0b0b0;
      --radius: 14px;
      --shadow: 0 2px 12px 0 rgba(0,0,0,0.14);
      --shadow2: 0 1px 2px 0 rgba(0,0,0,0.07);
      --transition: 0.18s cubic-bezier(.4,0,.2,1);
    }
    html, body {
      margin: 0;
      padding: 0;
      height: 100%;
      font-family: 'Inter', Arial, sans-serif;
      background: var(--bg);
      color: var(--text);
      box-sizing: border-box;
    }
    nav {
      background: var(--bg-secondary);
      padding: 0.7em 0;
      border-radius: 0 0 var(--radius) var(--radius);
      box-shadow: var(--shadow2);
      margin-bottom: 0.8em;
      display: flex;
      justify-content: center;
      gap: 1.5em;
      font-size: 1.07em;
    }
    nav a {
      color: var(--accent);
      text-decoration: none;
      font-weight: 600;
      padding: 0.3em 0.6em;
      border-radius: 6px;
      transition: background var(--transition), color var(--transition);
    }
    nav a:hover {
      background: var(--accent);
      color: #fff;
    }
    hr {
      border: none;
      border-top: 1px solid #222a35;
      margin: 0 0 1.4em 0;
    }
    .container {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 2.2em;
      max-width: 1400px;
      margin: auto;
      margin-top: 1.5em;
    }
    @media (max-width: 1100px) {
      .container {
        grid-template-columns: 1fr;
      }
    }
    .form, .results {
      background: var(--bg-tertiary);
      border-radius: var(--radius);
      box-shadow: var(--shadow);
      padding: 2.2em 2em 1.3em 2em;
      min-width: 300px;
      display: flex;
      flex-direction: column;
      gap: 0.7em;
      min-height: 560px;
    }
    .form h2, .results h3 {
      margin: 0 0 1em 0;
      font-weight: 700;
      letter-spacing: -.5px;
      color: var(--accent);
      font-size: 1.36em;
      text-align: left;
    }
    .form h2 { font-size: 1.48em; }
    input, select, textarea {
      font-family: inherit;
      background: var(--bg-secondary);
      border: 1.7px solid #2b2f41;
      color: var(--text);
      border-radius: 7px;
      font-size: 1em;
      padding: 0.72em 0.9em;
      margin-bottom: 0.5em;
      transition: border var(--transition), box-shadow var(--transition);
      outline: none;
      box-shadow: none;
    }
    input:focus, select:focus, textarea:focus {
      border-color: var(--accent);
      box-shadow: 0 0 0 2px #4f8cff55;
    }
    textarea {
      min-height: 90px;
      max-height: 220px;
      resize: vertical;
    }
    #idade {
      background-color: #191b25;
      color: #ffb300;
      border: none;
      font-weight: bold;
      margin-top: -7px;
      margin-bottom: 10px;
      max-width: 90px;
      min-width: 60px;
      text-align: center;
      font-size: 0.95em;
      padding-right: 0;
      padding-left: 0;
      box-sizing: border-box;
    }
    button {
      font-family: inherit;
      border: none;
      border-radius: 7px;
      padding: 0.7em 1.1em;
      font-size: 1.04em;
      font-weight: 600;
      cursor: pointer;
      transition: background var(--transition), box-shadow var(--transition), color var(--transition);
      box-shadow: var(--shadow2);
      margin-bottom: 0;
      margin-top: 0;
    }
    button.aprovar { background: var(--success);}
    button.reprovar { background: var(--danger);}
    button.limpar { background: #444;}
    button.nova { background: var(--danger); }
    button.copiar-visual { background: var(--accent);}
    button.limpar-individual { background: var(--warning); color: #222;}
    .botoes-rumo {
      margin: 1.1em 0 0.2em 0;
      display: flex;
      flex-wrap: wrap;
      gap: 0.5em;
    }
    .botoes-rumo button {
      flex: 1 1 115px;
      background: #1e88e5;
      font-weight: 600;
      font-size: 1em;
      border-radius: 7px;
      color: #fff;
      margin-bottom: 0;
      min-width: 110px;
    }
    .custom-row-btns {
      display: flex;
      gap: 0.7em;
      margin-bottom: 0.3em;
      margin-top: 0.1em;
    }
    .custom-row-btns button {
      flex: 1 1 50%;
      min-width: 120px;
    }
    .total-bar, .visual-bar {
      font-size: 1.09em;
      background: transparent;
      color: var(--muted);
      font-weight: 600;
      margin: 1.2em 0 0.5em 0;
      text-align: left;
      letter-spacing: .2px;
      padding: 0;
    }
    .total-bar span, .visual-bar span {
      color: var(--accent2);
      font-weight: bold;
    }
    .rumos-bar {
      display: inline-block;
      margin-left: 11px;
      font-size: 1em;
      letter-spacing: .5px;
    }
    .rumos-bar span {
      color: var(--accent2);
      font-weight: bold;
      margin-right: 8px;
    }
    .visual-bar {
      color: #ffe082;
      font-size: 1.07em;
      margin-bottom: 0.5em;
      margin-top: 4px;
    }
    .visual-bar span, .visual-bar .rumos-bar span { color: #ffe082;}
    .descricao-geral {
      margin-bottom: 3px;
      margin-top: 10px;
      font-size: 0.99em;
      color: var(--muted);
      background: #181a22;
      border-left: 4px solid var(--accent2);
      border-radius: 7px;
      padding: 0.7em 1em;
    }
    footer {
      text-align: center;
      margin-top: 28px;
      padding: 14px 0 5px 0;
      background: var(--bg-secondary);
      border-top: 1px solid #23253a;
      border-radius: var(--radius) var(--radius) 0 0;
    }
    .lembrete {
      text-align: center;
      margin-top: 1.6em;
      margin-bottom: 1em;
      padding: 1em 0.7em;
      background: linear-gradient(90deg, #23253a 90%, #ffb30022 100%);
      border-left: 7px solid var(--accent2);
      border-radius: var(--radius);
      color: var(--accent2);
      font-weight: 700;
      font-size: 1.06em;
      box-shadow: var(--shadow2);
      max-width: 700px;
      margin-left: auto;
      margin-right: auto;
    }
    .images-container {
      display: flex;
      gap: 1.5em;
      justify-content: center;
      align-items: center;
      margin-top: 1.2em;
      margin-bottom: 0.8em;
    }
    .images-container img {
      width: 110px;
      height: auto;
      border-radius: 8px;
      box-shadow: var(--shadow2);
      cursor: pointer;
      transition: transform .15s cubic-bezier(.4,0,.2,1);
    }
    .images-container img:hover {
      transform: scale(1.08) rotate(-3deg);
    }
    .btn-full {
      width: 100%;
      background: var(--accent);
      color: #fff;
      font-weight: bold;
      border-radius: 7px;
      font-size: 1.07em;
      height: 44px;
      box-shadow: var(--shadow2);
      max-width: 320px;
      text-align: center;
      padding-left: 0;
      margin-top: 0;
    }
    /* Feedback de cópia */
    #copyFeedback {
        position: fixed;
        bottom: 20px;
        left: 50%;
        transform: translateX(-50%);
        background-color: #333;
        color: white;
        padding: 10px 20px;
        border-radius: 5px;
        opacity: 0;
        transition: opacity 0.5s;
        z-index: 1000;
    }
    @media (max-width: 700px) {
      .container {
        grid-template-columns: 1fr;
        gap: 1em;
        padding: 0 0.2em;
      }
      .form, .results {
        padding: 1.2em 0.5em 1em 0.5em;
        min-width: 0;
      }
      nav {
        flex-direction: column;
        gap: 0.4em;
        font-size: 1em;
      }
      .images-container img {
        width: 70px;
      }
    }
    .form input, .form select, .form textarea {
      margin-bottom: 0.35em;
    }
    .form .input-group {
      display: flex;
      gap: 1em;
      flex-wrap: wrap; /* ADICIONADO: Permite quebra de linha para os campos */
    }
    .form .input-group > * { flex: 1 1 0; }
    /* Ajuste para botões principais */
    .botoes-principais {
        display: flex;
        flex-wrap: wrap;
        gap: 10px;
        margin-bottom: 10px;
    }
    .botoes-principais button {
        flex: 1;
        min-width: 100px;
    }
  </style>
</head>
<body>
  <nav>
		<a href="/cpxxp/index.html">🏠 Início</a>
        <a href="/cpxxp/entrevista/index.html">🎤 Entrevista</a>
        <a href="/cpxxp/punicoes_trabalho/index.html">🛠️ Punições Trabalho</a>
        <a href="/cpxxp/punicoes_nome/index.html">❌ Punições Nome</a>
        <a href="/cpxxp/verificar_perfil/index.html">🔍 Verificar Perfil</a>
        <a href="/cpxxp/reuniao_nome/index.html">📅 Marcar Troca de Nome</a>
        <a href="/cpxxp/modelos_suporte/index.html">🔄 Modelos Suporte</a>
  </nav>
  <hr>
  <div class="container">
    <form class="form" autocomplete="off" onsubmit="return false;">
      <h2>Entrevista Complexo XP</h2>
      <div class="input-group">
        <input type="text" id="nome" placeholder="Nome Completo (IRL)" autocomplete="off" />
        <input type="text" id="data" placeholder="Nascimento (dd mm aaaa)" autocomplete="off" />
        <input type="text" id="idade" placeholder="Idade" disabled />
      </div>
      <div class="input-group">
        <input type="text" id="discord" placeholder="ID Discord" autocomplete="off" />
        <input type="text" id="nomePersonagem" placeholder="Nome do Personagem (RP)" autocomplete="off" />
        <input type="text" id="entrevista" placeholder="Nº da Entrevista" autocomplete="off" />
      </div>
      <div class="input-group">
        <select id="rumo">
          <option value="">Selecione o Rumo</option>
          <option value="Policia">Polícia</option>
          <option value="Mecanica">Mecânica</option>
          <option value="Hospital">Hospital</option>
          <option value="Ilegal">Ilegal</option>
          <option value="Outro">Outro (especifique ao lado)</option>
        </select>
        <input type="text" id="rumoOutro" placeholder="Outro Rumo (se aplicável)" autocomplete="off" />
      </div>
      <textarea id="observacoes" placeholder="Observações ou motivo da reprovação..."></textarea>

      <div class="botoes-principais">
        <button class="aprovar" onclick="adicionar('aprovado')" type="button">Aprovar</button>
        <button class="reprovar" onclick="adicionar('reprovado')" type="button">Reprovar</button>
        <button class="limpar" onclick="limparCampos()" type="button">Limpar Tudo</button>
        <button class="nova" onclick="limparStorageGeral()" type="button">Nova Entrevista</button>
      </div>
      <div class="total-bar" id="totalBarForm">
        Total: <span id="totalGeral">0</span> |
        Aprovados: <span id="aprovadosGeral">0</span> |
        Reprovados: <span id="reprovadosGeral">0</span>
        <span class="rumos-bar">
          <span>polícia: <span id="aprovadosPolicia">0</span></span>|
          <span>hospital: <span id="aprovadosHospital">0</span></span>|
          <span>mecânica: <span id="aprovadosMecanica">0</span></span>|
          <span>ilegal: <span id="aprovadosIlegal">0</span></span>|
          <span>outros: <span id="aprovadosOutro">0</span></span>
        </span>
      </div>
      <div class="descricao-geral">
    <p style="margin:0;">
        <span style="color:#4caf50;font-weight:bold;">✅</span> Todos os dados de aprovados e reprovados de todas as entrevistas ficam salvos, mesmo que você limpe os campos visuais. Esses dados só serão apagados ao clicar em <b>"Nova Entrevista"</b>.<br><br>
        <span style="color:#ffb300;font-weight:bold;">⚠️</span> Limpar os campos visuais não apaga os dados salvos das entrevistas.<br><br>
        <span style="color:#4f8cff;font-weight:bold;">💾</span> <b>Salvar entrevista completa</b> salva todas as entrevistas acumuladas no painel geral, não apenas as informações visuais atuais.<br><br>
        <span style="color:#ffc107;font-weight:bold;">⭐</span> <b>Atenção:</b> Lembre-se de perguntar o nome do personagem e verifique se é registrável. Caso tenha dúvida, pergunte à <span style="color:#ffc107;font-weight:bold;">Jessie</span>.<br><br>
        <span style="color:#ffe082;font-weight:bold;">ℹ️</span> Aqui está o documento que deve ser repassado para o entrevistado: <a href="https://docs.google.com/document/d/1FRO7mZaNyVMSYKPTDAvXHE1kXz14GlOz5VGh7FhR-Kg/edit?pli=1&tab=t.0" style="color: red;" target="_blank">Regras básicas.</a>
    </p>
</div>
      <div class="botoes-rumo">
        <button onclick="copiarPorRumo('Policia', false)" type="button">Copiar Polícia</button>
        <button onclick="copiarPorRumo('Mecanica', false)" type="button">Copiar Mecânica</button>
        <button onclick="copiarPorRumo('Hospital', false)" type="button">Copiar Hospital</button>
        <button onclick="copiarPorRumo('Ilegal', false)" type="button">Copiar Ilegal</button>
        <button onclick="copiarPorRumo('Outro', false)" type="button">Copiar Outro</button>
      </div>
      <div style="margin-top: 1em; margin-bottom: 0.3em;">
        <button type="button" onclick="copiarReprovadosGeral()" style="width:100%;background:var(--danger);color:#fff;font-size:1.03em;">Copiar Reprovados (Geral)</button>
      </div>
      <div style="display: flex; justify-content: center; margin-top: 0.3em; margin-bottom: 0.8em;">
        <button class="btn-full" onclick="salvarTxtComDataHora()" type="button">
          Salvar entrevista completa (TXT)
        </button>
      </div>
    </form>
    <section class="results">
      <div class="visual-bar" id="visualBarResults">
        Visual | Aprovados: <span id="aprovadosVisual">0</span> | Reprovados: <span id="reprovadosVisual">0</span>
        <span class="rumos-bar">
          <span>polícia: <span id="aprovadosPoliciaVisual">0</span></span>|
          <span>hospital: <span id="aprovadosHospitalVisual">0</span></span>|
          <span>mecânica: <span id="aprovadosMecanicaVisual">0</span></span>|
          <span>ilegal: <span id="aprovadosIlegalVisual">0</span></span>|
          <span>outros: <span id="aprovadosOutroVisual">0</span></span>
        </span>
      </div>
      <h3>Aprovados</h3>
      <textarea id="resultadoAprovados" aria-label="Aprovados"></textarea>
      <div class="custom-row-btns">
        <button class="copiar-visual" onclick="copiarTexto('resultadoAprovados')" type="button">Copiar</button>
        <button class="limpar-individual" onclick="limparResultado('resultadoAprovados')" type="button">Limpar</button>
      </div>
      <h3>Reprovados (Detalhado)</h3>
      <textarea id="resultadoReprovadosDetalhado" aria-label="Reprovados Detalhado"></textarea>
      <div class="custom-row-btns">
        <button class="copiar-visual" onclick="copiarTexto('resultadoReprovadosDetalhado')" type="button">Copiar</button>
        <button class="limpar-individual" onclick="limparResultado('resultadoReprovadosDetalhado')" type="button">Limpar</button>
      </div>
      <h3>Reprovados (ID e Motivo)</h3>
      <textarea id="resultadoReprovadosSimples" aria-label="Reprovados Simples"></textarea>
      <div class="custom-row-btns">
        <button class="copiar-visual" onclick="copiarTexto('resultadoReprovadosSimples')" type="button">Copiar</button>
        <button class="limpar-individual" onclick="limparResultado('resultadoReprovadosSimples')" type="button">Limpar</button>
      </div>
      <div class="botoes-rumo" style="margin-top:13px;">
        <button onclick="copiarPorRumo('Policia', true)" type="button">Copiar Polícia</button>
        <button onclick="copiarPorRumo('Mecanica', true)" type="button">Copiar Mecânica</button>
        <button onclick="copiarPorRumo('Hospital', true)" type="button">Copiar Hospital</button>
        <button onclick="copiarPorRumo('Ilegal', true)" type="button">Copiar Ilegal</button>
        <button onclick="copiarPorRumo('Outro', true)" type="button">Copiar Outro</button>
      </div>
    </section>
  </div>
  <div class="images-container">
    <img src="https://i.postimg.cc/HxQrf0bf/image.png" alt="Imagem 1" title="Clique com o botão direito para abrir ou copiar" />
    <img src="https://i.postimg.cc/tTHTt18D/image.png" alt="Imagem 2" title="Clique com o botão direito para abrir ou copiar" />
  </div>
  <div class="lembrete">
    Lembrete: Não esqueça de registrar todas as informações no Discord".
  </div>
    <div id="copyFeedback">Copiado!</div>
  <footer>
    <img src="https://i.postimg.cc/WzSNyqxY/Jacky-Confuso.png" alt="Mascote Jacky" width="120" style="margin-bottom: 8px;" />
    <p>
      © 2025 - Todos os direitos reservados. Feito com ❤, ajuda de IA e um pouquinho de preguiça por
      <a href="https://jackymayers.github.io/" target="_blank" style="color: #e0e0e0;">Jacky Mayers</a>!
    </p>
  </footer>
  <script>
    window.onload = () => {
      // Adicionado 'nomePersonagem' ao localStorage.getItem para carregar ao iniciar
      ['nome', 'data', 'discord', 'nomePersonagem', 'entrevista', 'rumo', 'rumoOutro', 'observacoes'].forEach(id => {
        if (localStorage.getItem(id)) document.getElementById(id).value = localStorage.getItem(id);
      });
      ['resultadoAprovados', 'resultadoReprovadosDetalhado', 'resultadoReprovadosSimples'].forEach(id => {
        if (localStorage.getItem(id)) document.getElementById(id).value = localStorage.getItem(id);
      });
      calcularIdade();
      atualizarContadores();
      atualizarContadorVisual();
    };

    document.querySelectorAll('input, textarea, select').forEach(el => {
      el.addEventListener('input', () => {
        localStorage.setItem(el.id, el.value);
      });
    });

    // Listener para limpar 'rumoOutro' quando o 'rumo' selecionado não é 'Outro'
    document.getElementById('rumo').addEventListener('change', () => {
        const rumoSelect = document.getElementById('rumo');
        const rumoOutro = document.getElementById('rumoOutro');
        if (rumoSelect.value !== 'Outro') {
            rumoOutro.value = '';
            localStorage.removeItem('rumoOutro');
        }
    });

    document.getElementById('data').addEventListener('input', calcularIdade);

    function calcularIdade() {
      const dataInput = document.getElementById('data').value.trim();
      const idadeCampo = document.getElementById('idade');
      const dataRegex = /(\d{2})[-\/.\s]?(\d{2})[-\/.\s]?(\d{4})/;
      const match = dataInput.match(dataRegex);
      if (match) {
        const [dia, mes, ano] = [parseInt(match[1]), parseInt(match[2]) - 1, parseInt(match[3])];
        const nascimento = new Date(ano, mes, dia);
        const hoje = new Date();
        let idade = hoje.getFullYear() - nascimento.getFullYear();
        const m = hoje.getMonth() - nascimento.getMonth();
        if (m < 0 || (m === 0 && hoje.getDate() < nascimento.getDate())) {
          idade--;
        }
        idadeCampo.value = `${idade}`;
      } else {
        idadeCampo.value = '';
      }
    }

    function limparCampos(aprovacao = false) {
      if (!aprovacao && !confirm("Tem certeza que deseja limpar todos os campos?")) return;
      ['nome', 'data', 'idade', 'discord', 'nomePersonagem', 'entrevista', 'rumo', 'rumoOutro', 'observacoes'].forEach(id => {
        document.getElementById(id).value = '';
        if (!aprovacao) localStorage.removeItem(id);
      });
    }

    function limparResultado(id) {
      if (!confirm("Tem certeza que deseja limpar este campo de resultados?")) return;
      document.getElementById(id).value = '';
      localStorage.removeItem(id);
      atualizarContadorVisual();
    }

    async function copiarTexto(id) {
      const texto = document.getElementById(id).value;
      const feedbackDiv = document.getElementById('copyFeedback');
      try {
        await navigator.clipboard.writeText(texto);
        feedbackDiv.style.opacity = '1';
        setTimeout(() => {
          feedbackDiv.style.opacity = '0';
        }, 1500); // 1.5 segundos
      } catch (err) {
        console.error('Falha ao copiar texto: ', err);
        alert('Erro ao copiar o texto. Por favor, copie manualmente.');
      }
    }

    function adicionar(status) {
      const nome = document.getElementById('nome').value.trim();
      const data = formatarData(document.getElementById('data').value.trim());
      const idade = document.getElementById('idade').value.trim();
      const discord = document.getElementById('discord').value.trim();
      const nomePersonagem = document.getElementById('nomePersonagem').value.trim();
      const entrevista = document.getElementById('entrevista').value.trim();
      const rumoSelect = document.getElementById('rumo').value;
      const rumoOutro = document.getElementById('rumoOutro').value.trim();
      const observacoes = document.getElementById('observacoes').value.trim();
      const rumo = (rumoSelect === 'Outro' && rumoOutro) ? rumoOutro : rumoSelect;

      // Validação: ID Discord é sempre obrigatório
      if (!discord) {
        alert("O ID Discord é obrigatório para aprovar ou reprovar!");
        return;
      }

      // Validação flexível do ID Discord: avisa, mas permite continuar
      const idDiscordValido = /^\d{17,20}$/.test(discord); // Verifica se é numérico e tem entre 17 e 20 dígitos
      if (!idDiscordValido) {
        if (!confirm("ATENÇÃO: O ID Discord parece não estar no formato correto (apenas números, geralmente entre 17 e 20 dígitos).\n\nDeseja continuar mesmo assim?")) {
          return; // Se o usuário clicar em "Cancelar", a função é interrompida
        }
      }

      // Validação específica para aprovação
      if (status === 'aprovado' && (!nome || !data || !entrevista || !rumo)) {
        alert("Para aprovar, preencha o Nome, Data de Nascimento, Nº da Entrevista e Rumo.");
        return;
      }

      // Confirmação para reprovação
      if (status === 'reprovado' && !confirm("Tem certeza que deseja reprovar esta entrevista?")) {
          return;
      }

      let resultadoAprovadosStr = [];
      let resultadoDetalhadoStr = [];
      let resultadoSimplesStr = [];

      if (status === 'aprovado') {
        if (nome) resultadoAprovadosStr.push(`**Nome do Aprovado (IRL):** ${nome}`);
        if (data) resultadoAprovadosStr.push(`**Data de Nascimento:** ${data} (${idade} anos)`);
        if (discord) resultadoAprovadosStr.push(`**ID Discord:** ${discord} |<@${discord}>`);
        if (entrevista) resultadoAprovadosStr.push(`**Número da Entrevista:** ${entrevista}`);
        if (rumo) resultadoAprovadosStr.push(`**Rumo:** ${rumo}`);
        if (nomePersonagem) resultadoAprovadosStr.push(`**Nome do Personagem :** ${nomePersonagem}`);
        if (observacoes) resultadoAprovadosStr.push(`**Observações:** ${observacoes}`);

        const resultadoAprovados = document.getElementById('resultadoAprovados');
        resultadoAprovados.value += (resultadoAprovados.value.trim() ? '\n\n' : '') + resultadoAprovadosStr.join('\n');
        localStorage.setItem('resultadoAprovados', resultadoAprovados.value);
      } else { // status === 'reprovado'
        // Reprovados (Detalhado)
        if (nome) resultadoDetalhadoStr.push(`**Nome do Reprovado (IRL):** ${nome}`);
        if (data) resultadoDetalhadoStr.push(`**Data de Nascimento:** ${data} (${idade} anos)`);
        if (discord) resultadoDetalhadoStr.push(`**ID Discord:** ${discord} |<@${discord}>`);
        if (entrevista) resultadoDetalhadoStr.push(`**Número da Entrevista:** ${entrevista}`);
        if (rumo) resultadoDetalhadoStr.push(`**Rumo:** ${rumo}`);
        if (nomePersonagem) resultadoDetalhadoStr.push(`**Nome do Personagem :** ${nomePersonagem}`);
        resultadoDetalhadoStr.push(`**Observações:** ${observacoes ? observacoes : 'Motivo não informado.'}`); // Sempre incluir motivo na detalhada

        const resultadoDetalhado = document.getElementById('resultadoReprovadosDetalhado');
        resultadoDetalhado.value += (resultadoDetalhado.value.trim() ? '\n\n' : '') + resultadoDetalhadoStr.join('\n');
        localStorage.setItem('resultadoReprovadosDetalhado', resultadoDetalhado.value);

        // Reprovados (ID e Motivo) - ID é obrigatório
        resultadoSimplesStr.push(`ID: ${discord} | <@${discord}>\nMotivo: ${observacoes ? observacoes : 'Motivo não informado.'}`);
        const resultadoSimples = document.getElementById('resultadoReprovadosSimples');
        resultadoSimples.value += (resultadoSimples.value.trim() ? '\n\n' : '') + resultadoSimplesStr.join('\n');
        localStorage.setItem('resultadoReprovadosSimples', resultadoSimples.value);
      }

      // Salva no storage geral entrevistas
      let entrevistasGerais = JSON.parse(localStorage.getItem('entrevistasGerais') || '[]');
      entrevistasGerais.push({
        nome: nome,
        data: data,
        idade: idade,
        discord: discord,
        nomePersonagem: nomePersonagem,
        entrevista: entrevista,
        rumo: rumo,
        observacoes: observacoes,
        status: status,
        timestamp: new Date().toLocaleString()
      });
      localStorage.setItem('entrevistasGerais', JSON.stringify(entrevistasGerais));

      atualizarContadores();
      atualizarContadorVisual();
      limparCampos(true);
    }

    function formatarData(data) {
      const dataRegex = /(\d{2})[-\/.\s]?(\d{2})[-\/.\s]?(\d{4})/;
      const match = data.match(dataRegex);
      if (match) return `${match[1]}/${match[2]}/${match[3]}`;
      else {
        return '';
      }
    }

    function limparStorageGeral() {
      if (!confirm("AVISO: Esta ação irá limpar TODOS os dados salvos das entrevistas permanentemente. Tem certeza que deseja continuar?")) return;
      localStorage.removeItem('entrevistasGerais');
      alert('Storage geral das entrevistas limpa. Os campos e resultados visuais permanecem inalterados.');
      atualizarContadores();
    }

    function atualizarContadores() {
      const entrevistasGerais = JSON.parse(localStorage.getItem('entrevistasGerais') || '[]');
      const total = entrevistasGerais.length;
      const aprovados = entrevistasGerais.filter(e => e.status === 'aprovado').length;
      const reprovados = entrevistasGerais.filter(e => e.status === 'reprovado').length;
      
      const conhecidosArray = ['policia', 'mecanica', 'hospital', 'ilegal'];

      const countByRumo = rumo => entrevistasGerais.filter(e => e.status === 'aprovado' && (e.rumo || '').normalize("NFD").replace(/[\u0300-\u036f]/g, "").toLowerCase() === rumo.toLowerCase()).length;
      
      const countOutro = () => entrevistasGerais.filter(e => {
        const r = (e.rumo || '').normalize("NFD").replace(/[\u0300-\u036f]/g, "").toLowerCase();
        return e.status === 'aprovado' && !conhecidosArray.includes(r);
      }).length;

      document.getElementById('totalGeral').textContent = total;
      document.getElementById('aprovadosGeral').textContent = aprovados;
      document.getElementById('reprovadosGeral').textContent = reprovados;
      document.getElementById('aprovadosPolicia').textContent = countByRumo('policia');
      document.getElementById('aprovadosMecanica').textContent = countByRumo('mecanica');
      document.getElementById('aprovadosHospital').textContent = countByRumo('hospital');
      document.getElementById('aprovadosIlegal').textContent = countByRumo('ilegal');
      document.getElementById('aprovadosOutro').textContent = countOutro();
    }

    function atualizarContadorVisual() {
      const aprovadosText = document.getElementById('resultadoAprovados').value.trim();
      let aprovados = 0, policia = 0, mecanica = 0, hospital = 0, ilegal = 0, outro = 0;

      if (aprovadosText) {
        const blocos = aprovadosText.split(/\n\s*\n/).filter(b=>b.trim());
        aprovados = blocos.length;
        const conhecidosArray = ['policia', 'mecanica', 'hospital', 'ilegal'];
        
        blocos.forEach(b=>{
          const match = b.match(/[*_]*Rumo:[*_]*\s*(.*)/i);
          let rumo = match ? match[1].normalize("NFD").replace(/[\u0300-\u036f]/g, "").toLowerCase().trim() : "";
          
          if (rumo.startsWith("polic")) policia++;
          else if (rumo.startsWith("mecan")) mecanica++;
          else if (rumo.startsWith("hospital")) hospital++;
          else if (rumo.startsWith("ilegal")) ilegal++;
          else if (rumo && !conhecidosArray.some(c => rumo.startsWith(c))) outro++; // Conta como "outro" se tiver algum rumo, mas não for um dos conhecidos
        });
      }
      document.getElementById('aprovadosVisual').textContent = aprovados;
      document.getElementById('aprovadosPoliciaVisual').textContent = policia;
      document.getElementById('aprovadosMecanicaVisual').textContent = mecanica;
      document.getElementById('aprovadosHospitalVisual').textContent = hospital;
      document.getElementById('aprovadosIlegalVisual').textContent = ilegal;
      document.getElementById('aprovadosOutroVisual').textContent = outro;

      const reprovadosText = document.getElementById('resultadoReprovadosDetalhado').value.trim();
      let reprovadosDetalhadoCount = 0;
      if (reprovadosText) {
        reprovadosDetalhadoCount = reprovadosText.split(/\n\s*\n/).filter(b=>b.trim()).length;
      }
      document.getElementById('reprovadosVisual').textContent = reprovadosDetalhadoCount;
    }

    document.addEventListener('DOMContentLoaded', () => {
      ['resultadoAprovados', 'resultadoReprovadosDetalhado', 'resultadoReprovadosSimples'].forEach(id => {
        document.getElementById(id).addEventListener('input', atualizarContadorVisual);
      });
      atualizarContadorVisual();
    });

    async function copiarPorRumo(rumoParam, visual) {
      if (visual) {
        const aprovadosText = document.getElementById('resultadoAprovados').value.trim();
        if (!aprovadosText) { alert('Nenhum aprovado no campo visual.'); return; }
        const blocos = aprovadosText.split(/\n\s*\n/).filter(b=>b.trim());
        const conhecidosArray = ['policia','mecanica','hospital','ilegal'];
        let resultado = [];
        
        blocos.forEach(b=>{
          const match = b.match(/[*_]*Rumo:[*_]*\s*(.*)/i);
          let rumoValor = match ? match[1].normalize("NFD").replace(/[\u0300-\u036f]/g, "").toLowerCase().trim() : "";
          
          if (rumoParam === 'Outro') {
            if (rumoValor && !conhecidosArray.some(c => rumoValor.startsWith(c))) resultado.push(b);
          } else {
            if (rumoValor.startsWith(rumoParam.toLowerCase())) resultado.push(b);
          }
        });

        if (resultado.length === 0) {
          alert(`Nenhum aprovado visual para o rumo: ${rumoParam}`);
        } else {
          await copiarTextoDirect(resultado.join('\n\n')); // Usando a função auxiliar de cópia
        }
      } else {
        let entrevistas = JSON.parse(localStorage.getItem('entrevistasGerais') || '[]');
        let filteredEntrevistas;
        const conhecidosArray = ['Policia','Mecanica','Hospital','Ilegal'];

        if (rumoParam === 'Outro') {
          filteredEntrevistas = entrevistas.filter(e => e.status === 'aprovado' && e.rumo && !conhecidosArray.includes(e.rumo));
        } else {
          filteredEntrevistas = entrevistas.filter(e => e.status === 'aprovado' && (e.rumo || '').toLowerCase() === rumoParam.toLowerCase());
        }

        if (filteredEntrevistas.length === 0) {
          alert(`Nenhuma entrevista aprovada salva para o rumo: ${rumoParam}`);
          return;
        }
        let texto = '';
        filteredEntrevistas.forEach(e => {
          let entry = [];
          if (e.nome) entry.push(`**Nome do Aprovado (IRL):** ${e.nome}`);
          if (e.data) entry.push(`**Data de Nascimento:** ${e.data} (${e.idade})`);
          if (e.discord) entry.push(`**ID Discord:** ${e.discord} |<@${e.discord}>`);
          if (e.entrevista) entry.push(`**Número da Entrevista:** ${e.entrevista}`);
          if (e.rumo) entry.push(`**Rumo:** ${e.rumo}`);
          if (e.nomePersonagem) entry.push(`**Nome do Personagem :** ${e.nomePersonagem}`);
          if (e.observacoes) entry.push(`**Observações:** ${e.observacoes}`);
          texto += entry.join('\n') + '\n\n';
        });
        await copiarTextoDirect(texto.trim()); // Usando a função auxiliar de cópia
      }
    }

    async function salvarTxtComDataHora() {
      const entrevistasGerais = JSON.parse(localStorage.getItem('entrevistasGerais') || '[]');
      if (entrevistasGerais.length === 0) {
        alert("Nenhuma entrevista salva para salvar.");
        return;
      }
      const dataHoraAgora = new Date().toLocaleString();
      let texto = `--- Entrevistas Salvas em: ${dataHoraAgora} ---\n\n`;
      entrevistasGerais.forEach(e => {
        let entry = [];
        entry.push(`${e.status === 'aprovado' ? '**Nome do Aprovado (IRL):**' : '**Nome do Reprovado (IRL):**'} ${e.nome || 'Não Informado'}`);
        if (e.data) entry.push(`**Data de Nascimento:** ${e.data} (${e.idade})`);
        entry.push(`**ID Discord:** ${e.discord} |<@${e.discord}>`);
        if (e.entrevista) entry.push(`**Número da Entrevista:** ${e.entrevista}`);
        if (e.rumo) entry.push(`**Rumo:** ${e.rumo}`);
        if (e.nomePersonagem) entry.push(`**Nome do Personagem :** ${e.nomePersonagem}`);
        if (e.observacoes) entry.push(`**Observações:** ${e.observacoes}`);
        entry.push(`**Status:** ${e.status}`);
        entry.push(`**Salvo em:** ${e.timestamp}`);
        texto += entry.join('\n') + '\n\n';
      });
      const blob = new Blob([texto], { type: "text/plain;charset=utf-8" });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `entrevistas_${dataHoraAgora.replace(/[\/:\s]/g, "_")}.txt`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
      alert('Arquivo TXT salvo com sucesso!');
    }

    async function copiarReprovadosGeral() {
      const entrevistasGerais = JSON.parse(localStorage.getItem('entrevistasGerais') || '[]');
      const reprovados = entrevistasGerais.filter(e => e.status === 'reprovado');
      if (reprovados.length === 0) {
        alert("Nenhuma entrevista reprovada salva.");
        return;
      }
      let texto = '';
      reprovados.forEach(e => {
        texto += `ID: ${e.discord} | <@${e.discord}>\nMotivo: ${e.observacoes ? e.observacoes : 'Motivo não informado.'}\n\n`;
      });
      await copiarTextoDirect(texto.trim()); // Usando a função auxiliar de cópia
    }

    // Função auxiliar para copiar texto direto para a área de transferência com feedback visual
    async function copiarTextoDirect(textToCopy) {
      const feedbackDiv = document.getElementById('copyFeedback');
      try {
        await navigator.clipboard.writeText(textToCopy);
        feedbackDiv.style.opacity = '1';
        setTimeout(() => {
          feedbackDiv.style.opacity = '0';
        }, 1500); // 1.5 segundos
      } catch (err) {
        console.error('Falha ao copiar texto: ', err);
        alert('Erro ao copiar o texto. Por favor, copie manualmente.');
      }
    }
  </script>
</body>
</html>
